window.SIDEBAR_ITEMS = {"fn":[["parse_assert_stmt","Parse an `assert` statement."],["parse_fn_def","Parse a function definition. The optional `pub` qualifier must be parsed by the caller, and passed in. Next token must be `unsafe` or `fn`."],["parse_fn_sig","Parse a function definition without a body. The optional `pub` qualifier must be parsed by the caller, and passed in. Next token must be `unsafe` or `fn`."],["parse_for_stmt","Parse a `for` statement."],["parse_generic_param","Parse a single generic function parameter (eg. `T:SomeTrait` in `fn foo<T: SomeTrait>(some_arg: u256) -> bool`). # Panics Panics if the first token isn’t `Name`."],["parse_generic_params","Parse an angle-bracket-wrapped list of generic arguments (eg. `<T, R: SomeTrait>` in `fn foo<T, R: SomeTrait>(some_arg: u256) -> bool`). # Panics Panics if the first token isn’t `<`."],["parse_if_stmt","Parse an `if` statement."],["parse_match_arms",""],["parse_match_stmt","Parse a `match` statement."],["parse_pattern",""],["parse_return_stmt","Parse a `return` statement."],["parse_revert_stmt","Parse a `revert` statement."],["parse_single_word_stmt","Parse a `continue`, `break`, `pass`, or `revert` statement."],["parse_stmt","Parse a function-level statement."],["parse_unsafe_block","Parse an `unsafe` block."],["parse_while_stmt","Parse a `while` statement."]]};